import os
import logging
import asyncio
import schedule
import time
import threading
from datetime import datetime, date
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from .database import Database

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TimeTrackerBot:
    def __init__(self):
        self.db = Database()
        self.timezone = os.getenv('TIMEZONE', 'Europe/Moscow')
        self.bot = None
        self.dp = None
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.active_sessions = {}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.scheduler_thread.start()
    
    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –¥–∏–ø–≤–æ—Ä–∫–µ –≤ 23:59
        schedule.every().day.at("23:59").do(self._send_daily_report_sync)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–Ω—è—Ö –∂–∏–∑–Ω–∏ –≤ 6:00
        schedule.every().day.at("06:00").do(self._send_birthday_message_sync)
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    def _send_daily_report_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)"""
        if self.bot:
            asyncio.create_task(self.send_daily_report())
    
    def _send_birthday_message_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–Ω—è—Ö –∂–∏–∑–Ω–∏ (–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)"""
        if self.bot:
            asyncio.create_task(self.send_birthday_message())
    
    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å –¥–∏–ø–≤–æ—Ä–∫", callback_data="start_deepwork"))
        keyboard.add(InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–ø–≤–æ—Ä–∫", callback_data="stop_deepwork"))
        keyboard.row()
        keyboard.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_stats"))
        keyboard.add(InlineKeyboardButton(text="üéÇ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="set_birthday"))
        
        await message.answer(
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Time Tracker Bot!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ –¥–∏–ø–≤–æ—Ä–∫–µ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.as_markup()
        )
    
    async def button_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        await callback.answer()
        
        if callback.data == "start_deepwork":
            await self.start_deepwork(callback)
        elif callback.data == "stop_deepwork":
            await self.stop_deepwork(callback)
        elif callback.data == "today_stats":
            await self.show_today_stats(callback)
        elif callback.data == "set_birthday":
            await self.ask_birthday(callback)
        elif callback.data == "back_to_main":
            await self.back_to_main(callback)
    
    async def start_deepwork(self, callback: types.CallbackQuery):
        """–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –¥–∏–ø–≤–æ—Ä–∫–∞"""
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if user_id in self.active_sessions:
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            await callback.message.edit_text(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–∏–ø–≤–æ—Ä–∫–∞!\n"
                "–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é.",
                reply_markup=keyboard.as_markup()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session_id = self.db.start_session(user_id)
        if session_id:
            self.active_sessions[user_id] = session_id
            start_time = datetime.now().strftime("%H:%M")
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–ø–≤–æ—Ä–∫", callback_data="stop_deepwork"))
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            await callback.message.edit_text(
                f"üéØ –°–µ—Å—Å–∏—è –¥–∏–ø–≤–æ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ {start_time}\n\n"
                "–í—Ä–µ–º—è –∏–¥–µ—Ç... ‚è∞\n"
                "–ù–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–ø–≤–æ—Ä–∫' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
                reply_markup=keyboard.as_markup()
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def stop_deepwork(self, callback: types.CallbackQuery):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–∏–ø–≤–æ—Ä–∫–∞"""
        user_id = callback.from_user.id
        
        if user_id not in self.active_sessions:
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            await callback.message.edit_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–∏–ø–≤–æ—Ä–∫–∞.\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.",
                reply_markup=keyboard.as_markup()
            )
            return
        
        session_id = self.active_sessions[user_id]
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if self.db.end_session(session_id):
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            stats = self.db.get_today_stats(user_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            del self.active_sessions[user_id]
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å –¥–∏–ø–≤–æ—Ä–∫", callback_data="start_deepwork"))
            keyboard.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_stats"))
            keyboard.row()
            keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            await callback.message.edit_text(
                f"‚úÖ –°–µ—Å—Å–∏—è –¥–∏–ø–≤–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['hours']}—á {stats['minutes']}–º\n"
                f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {stats['session_count']}\n\n"
                "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ",
                reply_markup=keyboard.as_markup()
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def show_today_stats(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        user_id = callback.from_user.id
        stats = self.db.get_today_stats(user_id)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å –¥–∏–ø–≤–æ—Ä–∫", callback_data="start_deepwork"))
        keyboard.add(InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–ø–≤–æ—Ä–∫", callback_data="stop_deepwork"))
        keyboard.row()
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        await callback.message.edit_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({date.today().strftime('%d.%m.%Y')}):\n\n"
            f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –¥–∏–ø–≤–æ—Ä–∫–∞: {stats['hours']}—á {stats['minutes']}–º\n"
            f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {stats['session_count']}\n\n"
            f"–¶–µ–ª—å: 4-6 —á–∞—Å–æ–≤ –¥–∏–ø–≤–æ—Ä–∫–∞ –≤ –¥–µ–Ω—å üéØ",
            reply_markup=keyboard.as_markup()
        )
    
    async def ask_birthday(self, callback: types.CallbackQuery):
        """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        await callback.message.edit_text(
            "üéÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990\n\n"
            "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π.",
            reply_markup=keyboard.as_markup()
        )
    
    async def handle_birthday_input(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        user_id = message.from_user.id

        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            birthday_str = message.text
            birthday = datetime.strptime(birthday_str, "%d.%m.%Y").date()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.db.set_user_birthday(user_id, birthday):
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π
                days_lived = (date.today() - birthday).days
                
                keyboard = InlineKeyboardBuilder()
                keyboard.add(InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å –¥–∏–ø–≤–æ—Ä–∫", callback_data="start_deepwork"))
                keyboard.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_stats"))
                keyboard.row()
                keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
                
                await message.answer(
                    f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                    f"üéÇ –í–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday.strftime('%d.%m.%Y')}\n"
                    f"üåç –í—ã –ø—Ä–æ–∂–∏–ª–∏ –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ: {days_lived} –¥–Ω–µ–π\n\n"
                    "–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 6:00 –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π!",
                    reply_markup=keyboard.as_markup()
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
            )
    
    async def back_to_main(self, callback: types.CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å –¥–∏–ø–≤–æ—Ä–∫", callback_data="start_deepwork"))
        keyboard.add(InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–ø–≤–æ—Ä–∫", callback_data="stop_deepwork"))
        keyboard.row()
        keyboard.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_stats"))
        keyboard.add(InlineKeyboardButton(text="üéÇ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="set_birthday"))
        
        await callback.message.edit_text(
            "üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Time Tracker Bot\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.as_markup()
        )
    
    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –¥–∏–ø–≤–æ—Ä–∫–µ"""
        if not self.admin_user_id or not self.bot:
            return
        
        try:
            stats = self.db.get_today_stats(self.admin_user_id)
            
            if stats['total_minutes'] > 0:
                message = (
                    f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –¥–∏–ø–≤–æ—Ä–∫–µ\n"
                    f"üìÖ {date.today().strftime('%d.%m.%Y')}\n\n"
                    f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['hours']}—á {stats['minutes']}–º\n"
                    f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {stats['session_count']}\n\n"
                )
                
                # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if stats['total_minutes'] >= 240:  # 4+ —á–∞—Å–æ–≤
                    message += "üéâ –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏!"
                elif stats['total_minutes'] >= 180:  # 3+ —á–∞—Å–æ–≤
                    message += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
                elif stats['total_minutes'] >= 120:  # 2+ —á–∞—Å–æ–≤
                    message += "üëå –ù–µ–ø–ª–æ—Ö–æ! –ó–∞–≤—Ç—Ä–∞ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±–æ–ª—å—à–µ."
                else:
                    message += "üí™ –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å! –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ª—å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –µ—ë!"
                
                await self.bot.send_message(chat_id=self.admin_user_id, text=message)
                logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def send_birthday_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π"""
        if not self.admin_user_id or not self.bot:
            return
        
        try:
            birthday = self.db.get_user_birthday(self.admin_user_id)
            if birthday:
                days_lived = (date.today() - birthday).days
                message = (
                    f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n"
                    f"üéÇ –°–µ–≥–æ–¥–Ω—è –≤—ã –ø—Ä–æ–∂–∏–ª–∏ –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ: {days_lived} –¥–Ω–µ–π\n\n"
                    f"üí´ –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!\n"
                    f"üéØ –ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –¥–∏–ø–≤–æ—Ä–∫–∞ –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!"
                )
                
                await self.bot.send_message(chat_id=self.admin_user_id, text=message)
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–Ω—è—Ö –∂–∏–∑–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–Ω—è—Ö –∂–∏–∑–Ω–∏: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        token = os.getenv('TELEGRAM_TOKEN')
        if not token:
            logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.callback_query.register(self.button_callback)
        self.dp.message.register(self.handle_birthday_input, F.text)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await self.dp.start_polling(self.bot)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TimeTrackerBot()
    await bot.start()

if __name__ == "__main__":
    asyncio.run(main())
