version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: time_tracker_postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./bot/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - time_tracker_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d time_tracker"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Time Tracker Bot
  bot:
    build: .
    container_name: time_tracker_bot
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - TIMEZONE=${TIMEZONE:-Europe/Moscow}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - time_tracker_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # pgAdmin для управления базой данных (опционально)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: time_tracker_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@timetracker.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - time_tracker_network
    restart: unless-stopped
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  time_tracker_network:
    driver: bridge
